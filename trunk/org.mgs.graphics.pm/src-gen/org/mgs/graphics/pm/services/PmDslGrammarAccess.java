/*
* generated by Xtext
*/

package org.mgs.graphics.pm.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PmDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Assignment cImportsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0_0 = (RuleCall)cImportsAssignment_0_0.eContents().get(0);
		private final Assignment cStageAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStageStageParserRuleCall_0_1_0 = (RuleCall)cStageAssignment_0_1.eContents().get(0);
		private final Assignment cDefsAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cDefsModuleDefParserRuleCall_1_0 = (RuleCall)cDefsAssignment_1.eContents().get(0);
		
		//Model:
		//	imports+=Import* stage=Stage? & defs+=ModuleDef*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* stage=Stage? & defs+=ModuleDef*
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//imports+=Import* stage=Stage?
		public Group getGroup_0() { return cGroup_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_0_0() { return cImportsAssignment_0_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0_0() { return cImportsImportParserRuleCall_0_0_0; }

		//stage=Stage?
		public Assignment getStageAssignment_0_1() { return cStageAssignment_0_1; }

		//Stage
		public RuleCall getStageStageParserRuleCall_0_1_0() { return cStageStageParserRuleCall_0_1_0; }

		//defs+=ModuleDef*
		public Assignment getDefsAssignment_1() { return cDefsAssignment_1; }

		//ModuleDef
		public RuleCall getDefsModuleDefParserRuleCall_1_0() { return cDefsModuleDefParserRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class StageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cWidthKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWidthAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWidthINTTerminalRuleCall_4_0 = (RuleCall)cWidthAssignment_4.eContents().get(0);
		private final Keyword cHeightKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cHeightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHeightINTTerminalRuleCall_6_0 = (RuleCall)cHeightAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDepthKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cDepthAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cDepthINTTerminalRuleCall_7_1_0 = (RuleCall)cDepthAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDurationKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cDurationAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDurationINTTerminalRuleCall_8_1_0 = (RuleCall)cDurationAssignment_8_1.eContents().get(0);
		private final Keyword cFpsKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cFpsAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cFpsINTTerminalRuleCall_8_3_0 = (RuleCall)cFpsAssignment_8_3.eContents().get(0);
		private final Keyword cOutputKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cOutputAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cOutputExpressionParserRuleCall_10_0 = (RuleCall)cOutputAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Stage:
		//	"Stage" name=ID "{" "width" width=INT "height" height=INT ("depth" depth=INT)? ("duration" duration=INT "fps"
		//	fps=INT)? "output" output=Expression "}";
		public ParserRule getRule() { return rule; }

		//"Stage" name=ID "{" "width" width=INT "height" height=INT ("depth" depth=INT)? ("duration" duration=INT "fps" fps=INT)?
		//"output" output=Expression "}"
		public Group getGroup() { return cGroup; }

		//"Stage"
		public Keyword getStageKeyword_0() { return cStageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"width"
		public Keyword getWidthKeyword_3() { return cWidthKeyword_3; }

		//width=INT
		public Assignment getWidthAssignment_4() { return cWidthAssignment_4; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_4_0() { return cWidthINTTerminalRuleCall_4_0; }

		//"height"
		public Keyword getHeightKeyword_5() { return cHeightKeyword_5; }

		//height=INT
		public Assignment getHeightAssignment_6() { return cHeightAssignment_6; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_6_0() { return cHeightINTTerminalRuleCall_6_0; }

		//("depth" depth=INT)?
		public Group getGroup_7() { return cGroup_7; }

		//"depth"
		public Keyword getDepthKeyword_7_0() { return cDepthKeyword_7_0; }

		//depth=INT
		public Assignment getDepthAssignment_7_1() { return cDepthAssignment_7_1; }

		//INT
		public RuleCall getDepthINTTerminalRuleCall_7_1_0() { return cDepthINTTerminalRuleCall_7_1_0; }

		//("duration" duration=INT "fps" fps=INT)?
		public Group getGroup_8() { return cGroup_8; }

		//"duration"
		public Keyword getDurationKeyword_8_0() { return cDurationKeyword_8_0; }

		//duration=INT
		public Assignment getDurationAssignment_8_1() { return cDurationAssignment_8_1; }

		//INT
		public RuleCall getDurationINTTerminalRuleCall_8_1_0() { return cDurationINTTerminalRuleCall_8_1_0; }

		//"fps"
		public Keyword getFpsKeyword_8_2() { return cFpsKeyword_8_2; }

		//fps=INT
		public Assignment getFpsAssignment_8_3() { return cFpsAssignment_8_3; }

		//INT
		public RuleCall getFpsINTTerminalRuleCall_8_3_0() { return cFpsINTTerminalRuleCall_8_3_0; }

		//"output"
		public Keyword getOutputKeyword_9() { return cOutputKeyword_9; }

		//output=Expression
		public Assignment getOutputAssignment_10() { return cOutputAssignment_10; }

		//Expression
		public RuleCall getOutputExpressionParserRuleCall_10_0() { return cOutputExpressionParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class ModuleDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColorDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNoiseDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPerlinDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMarbleDefParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ModuleDef:
		//	ColorDef | OperationDef | NoiseDef | PerlinDef | MarbleDef;
		public ParserRule getRule() { return rule; }

		//ColorDef | OperationDef | NoiseDef | PerlinDef | MarbleDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//ColorDef
		public RuleCall getColorDefParserRuleCall_0() { return cColorDefParserRuleCall_0; }

		//OperationDef
		public RuleCall getOperationDefParserRuleCall_1() { return cOperationDefParserRuleCall_1; }

		//NoiseDef
		public RuleCall getNoiseDefParserRuleCall_2() { return cNoiseDefParserRuleCall_2; }

		//PerlinDef
		public RuleCall getPerlinDefParserRuleCall_3() { return cPerlinDefParserRuleCall_3; }

		//MarbleDef
		public RuleCall getMarbleDefParserRuleCall_4() { return cMarbleDefParserRuleCall_4; }
	}

	public class ColorDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cDefAlternatives_3_0 = (Alternatives)cDefAssignment_3.eContents().get(0);
		private final RuleCall cDefColorFloatDefParserRuleCall_3_0_0 = (RuleCall)cDefAlternatives_3_0.eContents().get(0);
		private final RuleCall cDefColorIntDefParserRuleCall_3_0_1 = (RuleCall)cDefAlternatives_3_0.eContents().get(1);
		private final RuleCall cDefColorHexaDefParserRuleCall_3_0_2 = (RuleCall)cDefAlternatives_3_0.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ColorDef:
		//	"Color" name=ID "{" def=(ColorFloatDef | ColorIntDef | ColorHexaDef) "}";
		public ParserRule getRule() { return rule; }

		//"Color" name=ID "{" def=(ColorFloatDef | ColorIntDef | ColorHexaDef) "}"
		public Group getGroup() { return cGroup; }

		//"Color"
		public Keyword getColorKeyword_0() { return cColorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//def=(ColorFloatDef | ColorIntDef | ColorHexaDef)
		public Assignment getDefAssignment_3() { return cDefAssignment_3; }

		//ColorFloatDef | ColorIntDef | ColorHexaDef
		public Alternatives getDefAlternatives_3_0() { return cDefAlternatives_3_0; }

		//ColorFloatDef
		public RuleCall getDefColorFloatDefParserRuleCall_3_0_0() { return cDefColorFloatDefParserRuleCall_3_0_0; }

		//ColorIntDef
		public RuleCall getDefColorIntDefParserRuleCall_3_0_1() { return cDefColorIntDefParserRuleCall_3_0_1; }

		//ColorHexaDef
		public RuleCall getDefColorHexaDefParserRuleCall_3_0_2() { return cDefColorHexaDefParserRuleCall_3_0_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ColorFloatDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorFloatDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRDECIMALTerminalRuleCall_0_0 = (RuleCall)cRAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cGAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cGDECIMALTerminalRuleCall_1_0_0 = (RuleCall)cGAssignment_1_0.eContents().get(0);
		private final Assignment cBAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBDECIMALTerminalRuleCall_1_1_0 = (RuleCall)cBAssignment_1_1.eContents().get(0);
		private final Assignment cAAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cADECIMALTerminalRuleCall_1_2_0 = (RuleCall)cAAssignment_1_2.eContents().get(0);
		
		//ColorFloatDef:
		//	r=DECIMAL (g=DECIMAL b=DECIMAL a=DECIMAL?)?;
		public ParserRule getRule() { return rule; }

		//r=DECIMAL (g=DECIMAL b=DECIMAL a=DECIMAL?)?
		public Group getGroup() { return cGroup; }

		//r=DECIMAL
		public Assignment getRAssignment_0() { return cRAssignment_0; }

		//DECIMAL
		public RuleCall getRDECIMALTerminalRuleCall_0_0() { return cRDECIMALTerminalRuleCall_0_0; }

		//(g=DECIMAL b=DECIMAL a=DECIMAL?)?
		public Group getGroup_1() { return cGroup_1; }

		//g=DECIMAL
		public Assignment getGAssignment_1_0() { return cGAssignment_1_0; }

		//DECIMAL
		public RuleCall getGDECIMALTerminalRuleCall_1_0_0() { return cGDECIMALTerminalRuleCall_1_0_0; }

		//b=DECIMAL
		public Assignment getBAssignment_1_1() { return cBAssignment_1_1; }

		//DECIMAL
		public RuleCall getBDECIMALTerminalRuleCall_1_1_0() { return cBDECIMALTerminalRuleCall_1_1_0; }

		//a=DECIMAL?
		public Assignment getAAssignment_1_2() { return cAAssignment_1_2; }

		//DECIMAL
		public RuleCall getADECIMALTerminalRuleCall_1_2_0() { return cADECIMALTerminalRuleCall_1_2_0; }
	}

	public class ColorIntDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorIntDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRINTTerminalRuleCall_0_0 = (RuleCall)cRAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cGAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cGINTTerminalRuleCall_1_0_0 = (RuleCall)cGAssignment_1_0.eContents().get(0);
		private final Assignment cBAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBINTTerminalRuleCall_1_1_0 = (RuleCall)cBAssignment_1_1.eContents().get(0);
		private final Assignment cAAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAINTTerminalRuleCall_1_2_0 = (RuleCall)cAAssignment_1_2.eContents().get(0);
		
		//ColorIntDef:
		//	r=INT (g=INT b=INT a=INT?)?;
		public ParserRule getRule() { return rule; }

		//r=INT (g=INT b=INT a=INT?)?
		public Group getGroup() { return cGroup; }

		//r=INT
		public Assignment getRAssignment_0() { return cRAssignment_0; }

		//INT
		public RuleCall getRINTTerminalRuleCall_0_0() { return cRINTTerminalRuleCall_0_0; }

		//(g=INT b=INT a=INT?)?
		public Group getGroup_1() { return cGroup_1; }

		//g=INT
		public Assignment getGAssignment_1_0() { return cGAssignment_1_0; }

		//INT
		public RuleCall getGINTTerminalRuleCall_1_0_0() { return cGINTTerminalRuleCall_1_0_0; }

		//b=INT
		public Assignment getBAssignment_1_1() { return cBAssignment_1_1; }

		//INT
		public RuleCall getBINTTerminalRuleCall_1_1_0() { return cBINTTerminalRuleCall_1_1_0; }

		//a=INT?
		public Assignment getAAssignment_1_2() { return cAAssignment_1_2; }

		//INT
		public RuleCall getAINTTerminalRuleCall_1_2_0() { return cAINTTerminalRuleCall_1_2_0; }
	}

	public class ColorHexaDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorHexaDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSSTRINGTerminalRuleCall_1_0 = (RuleCall)cSAssignment_1.eContents().get(0);
		
		//ColorHexaDef:
		//	"#" s=STRING;
		public ParserRule getRule() { return rule; }

		//"#" s=STRING
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//s=STRING
		public Assignment getSAssignment_1() { return cSAssignment_1; }

		//STRING
		public RuleCall getSSTRINGTerminalRuleCall_1_0() { return cSSTRINGTerminalRuleCall_1_0; }
	}

	public class OperationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cOutputKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOutputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutputExpressionParserRuleCall_4_0 = (RuleCall)cOutputAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OperationDef:
		//	"Operation" name=ID "{" "output" output=Expression "}";
		public ParserRule getRule() { return rule; }

		//"Operation" name=ID "{" "output" output=Expression "}"
		public Group getGroup() { return cGroup; }

		//"Operation"
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"output"
		public Keyword getOutputKeyword_3() { return cOutputKeyword_3; }

		//output=Expression
		public Assignment getOutputAssignment_4() { return cOutputAssignment_4; }

		//Expression
		public RuleCall getOutputExpressionParserRuleCall_4_0() { return cOutputExpressionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class NoiseDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoiseDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoiseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSeedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSeedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSeedINTTerminalRuleCall_4_0 = (RuleCall)cSeedAssignment_4.eContents().get(0);
		private final Keyword cFrequencyKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFrequencyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFrequencyINTTerminalRuleCall_6_0 = (RuleCall)cFrequencyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//NoiseDef:
		//	"Noise" name=ID "{" "seed" seed=INT "frequency" frequency=INT "}";
		public ParserRule getRule() { return rule; }

		//"Noise" name=ID "{" "seed" seed=INT "frequency" frequency=INT "}"
		public Group getGroup() { return cGroup; }

		//"Noise"
		public Keyword getNoiseKeyword_0() { return cNoiseKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"seed"
		public Keyword getSeedKeyword_3() { return cSeedKeyword_3; }

		//seed=INT
		public Assignment getSeedAssignment_4() { return cSeedAssignment_4; }

		//INT
		public RuleCall getSeedINTTerminalRuleCall_4_0() { return cSeedINTTerminalRuleCall_4_0; }

		//"frequency"
		public Keyword getFrequencyKeyword_5() { return cFrequencyKeyword_5; }

		//frequency=INT
		public Assignment getFrequencyAssignment_6() { return cFrequencyAssignment_6; }

		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_6_0() { return cFrequencyINTTerminalRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class PerlinDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PerlinDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPerlinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSeedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSeedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSeedINTTerminalRuleCall_4_0 = (RuleCall)cSeedAssignment_4.eContents().get(0);
		private final Keyword cIterationsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIterationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIterationsINTTerminalRuleCall_6_0 = (RuleCall)cIterationsAssignment_6.eContents().get(0);
		private final Keyword cTurbulenceKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTurbulenceAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTurbulenceDECIMALTerminalRuleCall_8_0 = (RuleCall)cTurbulenceAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//PerlinDef:
		//	"Perlin" name=ID "{" "seed" seed=INT "iterations" iterations=INT "turbulence" turbulence=DECIMAL "}";
		public ParserRule getRule() { return rule; }

		//"Perlin" name=ID "{" "seed" seed=INT "iterations" iterations=INT "turbulence" turbulence=DECIMAL "}"
		public Group getGroup() { return cGroup; }

		//"Perlin"
		public Keyword getPerlinKeyword_0() { return cPerlinKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"seed"
		public Keyword getSeedKeyword_3() { return cSeedKeyword_3; }

		//seed=INT
		public Assignment getSeedAssignment_4() { return cSeedAssignment_4; }

		//INT
		public RuleCall getSeedINTTerminalRuleCall_4_0() { return cSeedINTTerminalRuleCall_4_0; }

		//"iterations"
		public Keyword getIterationsKeyword_5() { return cIterationsKeyword_5; }

		//iterations=INT
		public Assignment getIterationsAssignment_6() { return cIterationsAssignment_6; }

		//INT
		public RuleCall getIterationsINTTerminalRuleCall_6_0() { return cIterationsINTTerminalRuleCall_6_0; }

		//"turbulence"
		public Keyword getTurbulenceKeyword_7() { return cTurbulenceKeyword_7; }

		//turbulence=DECIMAL
		public Assignment getTurbulenceAssignment_8() { return cTurbulenceAssignment_8; }

		//DECIMAL
		public RuleCall getTurbulenceDECIMALTerminalRuleCall_8_0() { return cTurbulenceDECIMALTerminalRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class MarbleDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MarbleDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMarbleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSeedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSeedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSeedINTTerminalRuleCall_4_0 = (RuleCall)cSeedAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MarbleDef:
		//	"Marble" name=ID "{" "seed" seed=INT "}";
		public ParserRule getRule() { return rule; }

		//"Marble" name=ID "{" "seed" seed=INT "}"
		public Group getGroup() { return cGroup; }

		//"Marble"
		public Keyword getMarbleKeyword_0() { return cMarbleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"seed"
		public Keyword getSeedKeyword_3() { return cSeedKeyword_3; }

		//seed=INT
		public Assignment getSeedAssignment_4() { return cSeedAssignment_4; }

		//INT
		public RuleCall getSeedINTTerminalRuleCall_4_0() { return cSeedINTTerminalRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpBOPParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	TerminalExpression ({Operation.left=current} op=BOP right=Expression)?;
		public ParserRule getRule() { return rule; }

		//TerminalExpression ({Operation.left=current} op=BOP right=Expression)?
		public Group getGroup() { return cGroup; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }

		//({Operation.left=current} op=BOP right=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0() { return cOperationLeftAction_1_0; }

		//op=BOP
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//BOP
		public RuleCall getOpBOPParserRuleCall_1_1_0() { return cOpBOPParserRuleCall_1_1_0; }

		//right=Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_2_0() { return cRightExpressionParserRuleCall_1_2_0; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cModuleCallAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRefAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cRefModuleDefCrossReference_1_1_0 = (CrossReference)cRefAssignment_1_1.eContents().get(0);
		private final RuleCall cRefModuleDefIDTerminalRuleCall_1_1_0_1 = (RuleCall)cRefModuleDefCrossReference_1_1_0.eContents().get(1);
		private final RuleCall cBuiltInCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cVariantExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cVariantAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariantVariantEnumRuleCall_3_1_0 = (RuleCall)cVariantAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cLiteralExpressionAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueDECIMALTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		
		//TerminalExpression returns Expression:
		//	"(" Expression ")" | {ModuleCall} ref=[ModuleDef] | BuiltInCall | {VariantExpression} variant=Variant |
		//	{LiteralExpression} value=DECIMAL;
		public ParserRule getRule() { return rule; }

		//"(" Expression ")" | {ModuleCall} ref=[ModuleDef] | BuiltInCall | {VariantExpression} variant=Variant |
		//{LiteralExpression} value=DECIMAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{ModuleCall} ref=[ModuleDef]
		public Group getGroup_1() { return cGroup_1; }

		//{ModuleCall}
		public Action getModuleCallAction_1_0() { return cModuleCallAction_1_0; }

		//ref=[ModuleDef]
		public Assignment getRefAssignment_1_1() { return cRefAssignment_1_1; }

		//[ModuleDef]
		public CrossReference getRefModuleDefCrossReference_1_1_0() { return cRefModuleDefCrossReference_1_1_0; }

		//ID
		public RuleCall getRefModuleDefIDTerminalRuleCall_1_1_0_1() { return cRefModuleDefIDTerminalRuleCall_1_1_0_1; }

		//BuiltInCall
		public RuleCall getBuiltInCallParserRuleCall_2() { return cBuiltInCallParserRuleCall_2; }

		//{VariantExpression} variant=Variant
		public Group getGroup_3() { return cGroup_3; }

		//{VariantExpression}
		public Action getVariantExpressionAction_3_0() { return cVariantExpressionAction_3_0; }

		//variant=Variant
		public Assignment getVariantAssignment_3_1() { return cVariantAssignment_3_1; }

		//Variant
		public RuleCall getVariantVariantEnumRuleCall_3_1_0() { return cVariantVariantEnumRuleCall_3_1_0; }

		//{LiteralExpression} value=DECIMAL
		public Group getGroup_4() { return cGroup_4; }

		//{LiteralExpression}
		public Action getLiteralExpressionAction_4_0() { return cLiteralExpressionAction_4_0; }

		//value=DECIMAL
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//DECIMAL
		public RuleCall getValueDECIMALTerminalRuleCall_4_1_0() { return cValueDECIMALTerminalRuleCall_4_1_0; }
	}

	public class BuiltInCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cINVAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cINVKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cAAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cAExpressionParserRuleCall_0_3_0 = (RuleCall)cAAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMIXAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMIXKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cAAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cAExpressionParserRuleCall_1_3_0 = (RuleCall)cAAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cBAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cBExpressionParserRuleCall_1_5_0 = (RuleCall)cBAssignment_1_5.eContents().get(0);
		private final Keyword cCommaKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cTAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cTExpressionParserRuleCall_1_7_0 = (RuleCall)cTAssignment_1_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSINAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cSINKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cAAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cAExpressionParserRuleCall_2_3_0 = (RuleCall)cAAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBOOLAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cBOOLKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cAAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cAExpressionParserRuleCall_3_3_0 = (RuleCall)cAAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cSCALEAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cSCALEKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cRateAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cRateExpressionParserRuleCall_4_3_0 = (RuleCall)cRateAssignment_4_3.eContents().get(0);
		private final Keyword cCommaKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cExpressionAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_4_5_0 = (RuleCall)cExpressionAssignment_4_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cRADIALAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cRADIALKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cExpressionAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_5_3_0 = (RuleCall)cExpressionAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		
		//BuiltInCall:
		//	{INV} "INV" "(" a=Expression ")" | {MIX} "MIX" "(" a=Expression "," b=Expression "," t=Expression ")" | {SIN} "SIN"
		//	"(" a=Expression ")" | {BOOL} "BOOL" "(" a=Expression ")" | {SCALE} "SCALE" "(" rate=Expression ","
		//	expression=Expression ")" | {RADIAL} "RADIAL" "(" expression=Expression ")";
		public ParserRule getRule() { return rule; }

		//{INV} "INV" "(" a=Expression ")" | {MIX} "MIX" "(" a=Expression "," b=Expression "," t=Expression ")" | {SIN} "SIN" "("
		//a=Expression ")" | {BOOL} "BOOL" "(" a=Expression ")" | {SCALE} "SCALE" "(" rate=Expression "," expression=Expression
		//")" | {RADIAL} "RADIAL" "(" expression=Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{INV} "INV" "(" a=Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//{INV}
		public Action getINVAction_0_0() { return cINVAction_0_0; }

		//"INV"
		public Keyword getINVKeyword_0_1() { return cINVKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//a=Expression
		public Assignment getAAssignment_0_3() { return cAAssignment_0_3; }

		//Expression
		public RuleCall getAExpressionParserRuleCall_0_3_0() { return cAExpressionParserRuleCall_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//{MIX} "MIX" "(" a=Expression "," b=Expression "," t=Expression ")"
		public Group getGroup_1() { return cGroup_1; }

		//{MIX}
		public Action getMIXAction_1_0() { return cMIXAction_1_0; }

		//"MIX"
		public Keyword getMIXKeyword_1_1() { return cMIXKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//a=Expression
		public Assignment getAAssignment_1_3() { return cAAssignment_1_3; }

		//Expression
		public RuleCall getAExpressionParserRuleCall_1_3_0() { return cAExpressionParserRuleCall_1_3_0; }

		//","
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }

		//b=Expression
		public Assignment getBAssignment_1_5() { return cBAssignment_1_5; }

		//Expression
		public RuleCall getBExpressionParserRuleCall_1_5_0() { return cBExpressionParserRuleCall_1_5_0; }

		//","
		public Keyword getCommaKeyword_1_6() { return cCommaKeyword_1_6; }

		//t=Expression
		public Assignment getTAssignment_1_7() { return cTAssignment_1_7; }

		//Expression
		public RuleCall getTExpressionParserRuleCall_1_7_0() { return cTExpressionParserRuleCall_1_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_8() { return cRightParenthesisKeyword_1_8; }

		//{SIN} "SIN" "(" a=Expression ")"
		public Group getGroup_2() { return cGroup_2; }

		//{SIN}
		public Action getSINAction_2_0() { return cSINAction_2_0; }

		//"SIN"
		public Keyword getSINKeyword_2_1() { return cSINKeyword_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//a=Expression
		public Assignment getAAssignment_2_3() { return cAAssignment_2_3; }

		//Expression
		public RuleCall getAExpressionParserRuleCall_2_3_0() { return cAExpressionParserRuleCall_2_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }

		//{BOOL} "BOOL" "(" a=Expression ")"
		public Group getGroup_3() { return cGroup_3; }

		//{BOOL}
		public Action getBOOLAction_3_0() { return cBOOLAction_3_0; }

		//"BOOL"
		public Keyword getBOOLKeyword_3_1() { return cBOOLKeyword_3_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }

		//a=Expression
		public Assignment getAAssignment_3_3() { return cAAssignment_3_3; }

		//Expression
		public RuleCall getAExpressionParserRuleCall_3_3_0() { return cAExpressionParserRuleCall_3_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }

		//{SCALE} "SCALE" "(" rate=Expression "," expression=Expression ")"
		public Group getGroup_4() { return cGroup_4; }

		//{SCALE}
		public Action getSCALEAction_4_0() { return cSCALEAction_4_0; }

		//"SCALE"
		public Keyword getSCALEKeyword_4_1() { return cSCALEKeyword_4_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }

		//rate=Expression
		public Assignment getRateAssignment_4_3() { return cRateAssignment_4_3; }

		//Expression
		public RuleCall getRateExpressionParserRuleCall_4_3_0() { return cRateExpressionParserRuleCall_4_3_0; }

		//","
		public Keyword getCommaKeyword_4_4() { return cCommaKeyword_4_4; }

		//expression=Expression
		public Assignment getExpressionAssignment_4_5() { return cExpressionAssignment_4_5; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_5_0() { return cExpressionExpressionParserRuleCall_4_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_6() { return cRightParenthesisKeyword_4_6; }

		//{RADIAL} "RADIAL" "(" expression=Expression ")"
		public Group getGroup_5() { return cGroup_5; }

		//{RADIAL}
		public Action getRADIALAction_5_0() { return cRADIALAction_5_0; }

		//"RADIAL"
		public Keyword getRADIALKeyword_5_1() { return cRADIALKeyword_5_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_5_3() { return cExpressionAssignment_5_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_5_3_0() { return cExpressionExpressionParserRuleCall_5_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
	}

	public class BOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//BOP returns ecore::EString:
		//	"+" | "-" | "*";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
	}
	
	
	public class VariantElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Variant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cXEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cXXKeyword_0_0 = (Keyword)cXEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cYYKeyword_1_0 = (Keyword)cYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cZEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cZZKeyword_2_0 = (Keyword)cZEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cUEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cUUKeyword_3_0 = (Keyword)cUEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cVEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cVVKeyword_4_0 = (Keyword)cVEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cWEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cWWKeyword_5_0 = (Keyword)cWEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTTKeyword_6_0 = (Keyword)cTEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum Variant:
		//	X | Y | Z | U | V | W | T;
		public EnumRule getRule() { return rule; }

		//X | Y | Z | U | V | W | T
		public Alternatives getAlternatives() { return cAlternatives; }

		//X
		public EnumLiteralDeclaration getXEnumLiteralDeclaration_0() { return cXEnumLiteralDeclaration_0; }

		//"X"
		public Keyword getXXKeyword_0_0() { return cXXKeyword_0_0; }

		//Y
		public EnumLiteralDeclaration getYEnumLiteralDeclaration_1() { return cYEnumLiteralDeclaration_1; }

		//"Y"
		public Keyword getYYKeyword_1_0() { return cYYKeyword_1_0; }

		//Z
		public EnumLiteralDeclaration getZEnumLiteralDeclaration_2() { return cZEnumLiteralDeclaration_2; }

		//"Z"
		public Keyword getZZKeyword_2_0() { return cZZKeyword_2_0; }

		//U
		public EnumLiteralDeclaration getUEnumLiteralDeclaration_3() { return cUEnumLiteralDeclaration_3; }

		//"U"
		public Keyword getUUKeyword_3_0() { return cUUKeyword_3_0; }

		//V
		public EnumLiteralDeclaration getVEnumLiteralDeclaration_4() { return cVEnumLiteralDeclaration_4; }

		//"V"
		public Keyword getVVKeyword_4_0() { return cVVKeyword_4_0; }

		//W
		public EnumLiteralDeclaration getWEnumLiteralDeclaration_5() { return cWEnumLiteralDeclaration_5; }

		//"W"
		public Keyword getWWKeyword_5_0() { return cWWKeyword_5_0; }

		//T
		public EnumLiteralDeclaration getTEnumLiteralDeclaration_6() { return cTEnumLiteralDeclaration_6; }

		//"T"
		public Keyword getTTKeyword_6_0() { return cTTKeyword_6_0; }
	}
	
	private ModelElements pModel;
	private ImportElements pImport;
	private StageElements pStage;
	private ModuleDefElements pModuleDef;
	private ColorDefElements pColorDef;
	private ColorFloatDefElements pColorFloatDef;
	private ColorIntDefElements pColorIntDef;
	private ColorHexaDefElements pColorHexaDef;
	private OperationDefElements pOperationDef;
	private NoiseDefElements pNoiseDef;
	private PerlinDefElements pPerlinDef;
	private MarbleDefElements pMarbleDef;
	private VariantElements unknownRuleVariant;
	private TerminalRule tDECIMAL;
	private ExpressionElements pExpression;
	private TerminalExpressionElements pTerminalExpression;
	private BuiltInCallElements pBuiltInCall;
	private BOPElements pBOP;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PmDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	imports+=Import* stage=Stage? & defs+=ModuleDef*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Import:
	//	"import" importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Stage:
	//	"Stage" name=ID "{" "width" width=INT "height" height=INT ("depth" depth=INT)? ("duration" duration=INT "fps"
	//	fps=INT)? "output" output=Expression "}";
	public StageElements getStageAccess() {
		return (pStage != null) ? pStage : (pStage = new StageElements());
	}
	
	public ParserRule getStageRule() {
		return getStageAccess().getRule();
	}

	//ModuleDef:
	//	ColorDef | OperationDef | NoiseDef | PerlinDef | MarbleDef;
	public ModuleDefElements getModuleDefAccess() {
		return (pModuleDef != null) ? pModuleDef : (pModuleDef = new ModuleDefElements());
	}
	
	public ParserRule getModuleDefRule() {
		return getModuleDefAccess().getRule();
	}

	//ColorDef:
	//	"Color" name=ID "{" def=(ColorFloatDef | ColorIntDef | ColorHexaDef) "}";
	public ColorDefElements getColorDefAccess() {
		return (pColorDef != null) ? pColorDef : (pColorDef = new ColorDefElements());
	}
	
	public ParserRule getColorDefRule() {
		return getColorDefAccess().getRule();
	}

	//ColorFloatDef:
	//	r=DECIMAL (g=DECIMAL b=DECIMAL a=DECIMAL?)?;
	public ColorFloatDefElements getColorFloatDefAccess() {
		return (pColorFloatDef != null) ? pColorFloatDef : (pColorFloatDef = new ColorFloatDefElements());
	}
	
	public ParserRule getColorFloatDefRule() {
		return getColorFloatDefAccess().getRule();
	}

	//ColorIntDef:
	//	r=INT (g=INT b=INT a=INT?)?;
	public ColorIntDefElements getColorIntDefAccess() {
		return (pColorIntDef != null) ? pColorIntDef : (pColorIntDef = new ColorIntDefElements());
	}
	
	public ParserRule getColorIntDefRule() {
		return getColorIntDefAccess().getRule();
	}

	//ColorHexaDef:
	//	"#" s=STRING;
	public ColorHexaDefElements getColorHexaDefAccess() {
		return (pColorHexaDef != null) ? pColorHexaDef : (pColorHexaDef = new ColorHexaDefElements());
	}
	
	public ParserRule getColorHexaDefRule() {
		return getColorHexaDefAccess().getRule();
	}

	//OperationDef:
	//	"Operation" name=ID "{" "output" output=Expression "}";
	public OperationDefElements getOperationDefAccess() {
		return (pOperationDef != null) ? pOperationDef : (pOperationDef = new OperationDefElements());
	}
	
	public ParserRule getOperationDefRule() {
		return getOperationDefAccess().getRule();
	}

	//NoiseDef:
	//	"Noise" name=ID "{" "seed" seed=INT "frequency" frequency=INT "}";
	public NoiseDefElements getNoiseDefAccess() {
		return (pNoiseDef != null) ? pNoiseDef : (pNoiseDef = new NoiseDefElements());
	}
	
	public ParserRule getNoiseDefRule() {
		return getNoiseDefAccess().getRule();
	}

	//PerlinDef:
	//	"Perlin" name=ID "{" "seed" seed=INT "iterations" iterations=INT "turbulence" turbulence=DECIMAL "}";
	public PerlinDefElements getPerlinDefAccess() {
		return (pPerlinDef != null) ? pPerlinDef : (pPerlinDef = new PerlinDefElements());
	}
	
	public ParserRule getPerlinDefRule() {
		return getPerlinDefAccess().getRule();
	}

	//MarbleDef:
	//	"Marble" name=ID "{" "seed" seed=INT "}";
	public MarbleDefElements getMarbleDefAccess() {
		return (pMarbleDef != null) ? pMarbleDef : (pMarbleDef = new MarbleDefElements());
	}
	
	public ParserRule getMarbleDefRule() {
		return getMarbleDefAccess().getRule();
	}

	//enum Variant:
	//	X | Y | Z | U | V | W | T;
	public VariantElements getVariantAccess() {
		return (unknownRuleVariant != null) ? unknownRuleVariant : (unknownRuleVariant = new VariantElements());
	}
	
	public EnumRule getVariantRule() {
		return getVariantAccess().getRule();
	}

	//terminal DECIMAL returns ecore::EFloat:
	//	"0".."9"* "." "0".."9"*;
	public TerminalRule getDECIMALRule() {
		return (tDECIMAL != null) ? tDECIMAL : (tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL"));
	} 

	//Expression:
	//	TerminalExpression ({Operation.left=current} op=BOP right=Expression)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//TerminalExpression returns Expression:
	//	"(" Expression ")" | {ModuleCall} ref=[ModuleDef] | BuiltInCall | {VariantExpression} variant=Variant |
	//	{LiteralExpression} value=DECIMAL;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//BuiltInCall:
	//	{INV} "INV" "(" a=Expression ")" | {MIX} "MIX" "(" a=Expression "," b=Expression "," t=Expression ")" | {SIN} "SIN"
	//	"(" a=Expression ")" | {BOOL} "BOOL" "(" a=Expression ")" | {SCALE} "SCALE" "(" rate=Expression ","
	//	expression=Expression ")" | {RADIAL} "RADIAL" "(" expression=Expression ")";
	public BuiltInCallElements getBuiltInCallAccess() {
		return (pBuiltInCall != null) ? pBuiltInCall : (pBuiltInCall = new BuiltInCallElements());
	}
	
	public ParserRule getBuiltInCallRule() {
		return getBuiltInCallAccess().getRule();
	}

	//BOP returns ecore::EString:
	//	"+" | "-" | "*";
	public BOPElements getBOPAccess() {
		return (pBOP != null) ? pBOP : (pBOP = new BOPElements());
	}
	
	public ParserRule getBOPRule() {
		return getBOPAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
