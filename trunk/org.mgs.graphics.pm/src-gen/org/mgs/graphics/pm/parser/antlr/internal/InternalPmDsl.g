/*
* generated by Xtext
*/
grammar InternalPmDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.mgs.graphics.pm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.mgs.graphics.pm.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.mgs.graphics.pm.services.PmDslGrammarAccess;

}

@parser::members {

 	private PmDslGrammarAccess grammarAccess;
 	
    public InternalPmDslParser(TokenStream input, IAstFactory factory, PmDslGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/mgs/graphics/pm/parser/antlr/internal/InternalPmDsl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected PmDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getModelAccess().getUnorderedGroup());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 0);
	 				}
					((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_imports_1_0=ruleImport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_1_0, 
	        		"Import", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getStageStageParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_stage_2_0=ruleStage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"stage",
	        		lv_stage_2_0, 
	        		"Stage", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 1);
	 				}
					(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getDefsModuleDefParserRuleCall_1_0(), currentNode); 
	    }
		lv_defs_3_0=ruleModuleDef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"defs",
	        		lv_defs_3_0, 
	        		"ModuleDef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getModelAccess().getUnorderedGroup())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getModelAccess().getUnorderedGroup());
	}

)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_0(), null); 
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), "importURI"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importURI",
	        		lv_importURI_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleStage
entryRuleStage returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStageRule(), currentNode); }
	 iv_ruleStage=ruleStage 
	 { $current=$iv_ruleStage.current; } 
	 EOF 
;

// Rule Stage
ruleStage returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'Stage' 
    {
        createLeafNode(grammarAccess.getStageAccess().getStageKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getStageAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getStageAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
	'width' 
    {
        createLeafNode(grammarAccess.getStageAccess().getWidthKeyword_3(), null); 
    }
(
(
		lv_width_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getStageAccess().getWidthINTTerminalRuleCall_4_0(), "width"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"width",
	        		lv_width_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'height' 
    {
        createLeafNode(grammarAccess.getStageAccess().getHeightKeyword_5(), null); 
    }
(
(
		lv_height_6_0=RULE_INT
		{
			createLeafNode(grammarAccess.getStageAccess().getHeightINTTerminalRuleCall_6_0(), "height"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"height",
	        		lv_height_6_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'depth' 
    {
        createLeafNode(grammarAccess.getStageAccess().getDepthKeyword_7_0(), null); 
    }
(
(
		lv_depth_8_0=RULE_INT
		{
			createLeafNode(grammarAccess.getStageAccess().getDepthINTTerminalRuleCall_7_1_0(), "depth"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"depth",
	        		lv_depth_8_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'duration' 
    {
        createLeafNode(grammarAccess.getStageAccess().getDurationKeyword_8_0(), null); 
    }
(
(
		lv_duration_10_0=RULE_INT
		{
			createLeafNode(grammarAccess.getStageAccess().getDurationINTTerminalRuleCall_8_1_0(), "duration"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"duration",
	        		lv_duration_10_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'fps' 
    {
        createLeafNode(grammarAccess.getStageAccess().getFpsKeyword_8_2(), null); 
    }
(
(
		lv_fps_12_0=RULE_INT
		{
			createLeafNode(grammarAccess.getStageAccess().getFpsINTTerminalRuleCall_8_3_0(), "fps"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fps",
	        		lv_fps_12_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	'output' 
    {
        createLeafNode(grammarAccess.getStageAccess().getOutputKeyword_9(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStageAccess().getOutputExpressionParserRuleCall_10_0(), currentNode); 
	    }
		lv_output_14_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"output",
	        		lv_output_14_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getStageAccess().getRightCurlyBracketKeyword_11(), null); 
    }
)
;





// Entry rule entryRuleModuleDef
entryRuleModuleDef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModuleDefRule(), currentNode); }
	 iv_ruleModuleDef=ruleModuleDef 
	 { $current=$iv_ruleModuleDef.current; } 
	 EOF 
;

// Rule ModuleDef
ruleModuleDef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getModuleDefAccess().getColorDefParserRuleCall_0(), currentNode); 
    }
    this_ColorDef_0=ruleColorDef
    { 
        $current = $this_ColorDef_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModuleDefAccess().getOperationDefParserRuleCall_1(), currentNode); 
    }
    this_OperationDef_1=ruleOperationDef
    { 
        $current = $this_OperationDef_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModuleDefAccess().getNoiseDefParserRuleCall_2(), currentNode); 
    }
    this_NoiseDef_2=ruleNoiseDef
    { 
        $current = $this_NoiseDef_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModuleDefAccess().getPerlinDefParserRuleCall_3(), currentNode); 
    }
    this_PerlinDef_3=rulePerlinDef
    { 
        $current = $this_PerlinDef_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModuleDefAccess().getMarbleDefParserRuleCall_4(), currentNode); 
    }
    this_MarbleDef_4=ruleMarbleDef
    { 
        $current = $this_MarbleDef_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleColorDef
entryRuleColorDef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getColorDefRule(), currentNode); }
	 iv_ruleColorDef=ruleColorDef 
	 { $current=$iv_ruleColorDef.current; } 
	 EOF 
;

// Rule ColorDef
ruleColorDef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'Color' 
    {
        createLeafNode(grammarAccess.getColorDefAccess().getColorKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getColorDefAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getColorDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getColorDefAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getColorDefAccess().getDefColorFloatDefParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_def_3_1=ruleColorFloatDef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getColorDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"def",
	        		lv_def_3_1, 
	        		"ColorFloatDef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getColorDefAccess().getDefColorIntDefParserRuleCall_3_0_1(), currentNode); 
	    }
		lv_def_3_2=ruleColorIntDef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getColorDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"def",
	        		lv_def_3_2, 
	        		"ColorIntDef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getColorDefAccess().getDefColorHexaDefParserRuleCall_3_0_2(), currentNode); 
	    }
		lv_def_3_3=ruleColorHexaDef		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getColorDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"def",
	        		lv_def_3_3, 
	        		"ColorHexaDef", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
)	'}' 
    {
        createLeafNode(grammarAccess.getColorDefAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleColorFloatDef
entryRuleColorFloatDef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getColorFloatDefRule(), currentNode); }
	 iv_ruleColorFloatDef=ruleColorFloatDef 
	 { $current=$iv_ruleColorFloatDef.current; } 
	 EOF 
;

// Rule ColorFloatDef
ruleColorFloatDef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_r_0_0=RULE_DECIMAL
		{
			createLeafNode(grammarAccess.getColorFloatDefAccess().getRDECIMALTerminalRuleCall_0_0(), "r"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getColorFloatDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"r",
	        		lv_r_0_0, 
	        		"DECIMAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		lv_g_1_0=RULE_DECIMAL
		{
			createLeafNode(grammarAccess.getColorFloatDefAccess().getGDECIMALTerminalRuleCall_1_0_0(), "g"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getColorFloatDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"g",
	        		lv_g_1_0, 
	        		"DECIMAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_b_2_0=RULE_DECIMAL
		{
			createLeafNode(grammarAccess.getColorFloatDefAccess().getBDECIMALTerminalRuleCall_1_1_0(), "b"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getColorFloatDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"b",
	        		lv_b_2_0, 
	        		"DECIMAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_a_3_0=RULE_DECIMAL
		{
			createLeafNode(grammarAccess.getColorFloatDefAccess().getADECIMALTerminalRuleCall_1_2_0(), "a"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getColorFloatDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"a",
	        		lv_a_3_0, 
	        		"DECIMAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)?)
;





// Entry rule entryRuleColorIntDef
entryRuleColorIntDef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getColorIntDefRule(), currentNode); }
	 iv_ruleColorIntDef=ruleColorIntDef 
	 { $current=$iv_ruleColorIntDef.current; } 
	 EOF 
;

// Rule ColorIntDef
ruleColorIntDef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_r_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getColorIntDefAccess().getRINTTerminalRuleCall_0_0(), "r"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getColorIntDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"r",
	        		lv_r_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		lv_g_1_0=RULE_INT
		{
			createLeafNode(grammarAccess.getColorIntDefAccess().getGINTTerminalRuleCall_1_0_0(), "g"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getColorIntDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"g",
	        		lv_g_1_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_b_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getColorIntDefAccess().getBINTTerminalRuleCall_1_1_0(), "b"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getColorIntDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"b",
	        		lv_b_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_a_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getColorIntDefAccess().getAINTTerminalRuleCall_1_2_0(), "a"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getColorIntDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"a",
	        		lv_a_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)?)
;





// Entry rule entryRuleColorHexaDef
entryRuleColorHexaDef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getColorHexaDefRule(), currentNode); }
	 iv_ruleColorHexaDef=ruleColorHexaDef 
	 { $current=$iv_ruleColorHexaDef.current; } 
	 EOF 
;

// Rule ColorHexaDef
ruleColorHexaDef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'#' 
    {
        createLeafNode(grammarAccess.getColorHexaDefAccess().getNumberSignKeyword_0(), null); 
    }
(
(
		lv_s_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getColorHexaDefAccess().getSSTRINGTerminalRuleCall_1_0(), "s"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getColorHexaDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"s",
	        		lv_s_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleOperationDef
entryRuleOperationDef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationDefRule(), currentNode); }
	 iv_ruleOperationDef=ruleOperationDef 
	 { $current=$iv_ruleOperationDef.current; } 
	 EOF 
;

// Rule OperationDef
ruleOperationDef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'Operation' 
    {
        createLeafNode(grammarAccess.getOperationDefAccess().getOperationKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getOperationDefAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getOperationDefAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
	'output' 
    {
        createLeafNode(grammarAccess.getOperationDefAccess().getOutputKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationDefAccess().getOutputExpressionParserRuleCall_4_0(), currentNode); 
	    }
		lv_output_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"output",
	        		lv_output_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getOperationDefAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleNoiseDef
entryRuleNoiseDef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNoiseDefRule(), currentNode); }
	 iv_ruleNoiseDef=ruleNoiseDef 
	 { $current=$iv_ruleNoiseDef.current; } 
	 EOF 
;

// Rule NoiseDef
ruleNoiseDef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'Noise' 
    {
        createLeafNode(grammarAccess.getNoiseDefAccess().getNoiseKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getNoiseDefAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNoiseDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getNoiseDefAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
	'seed' 
    {
        createLeafNode(grammarAccess.getNoiseDefAccess().getSeedKeyword_3(), null); 
    }
(
(
		lv_seed_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getNoiseDefAccess().getSeedINTTerminalRuleCall_4_0(), "seed"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNoiseDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"seed",
	        		lv_seed_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'frequency' 
    {
        createLeafNode(grammarAccess.getNoiseDefAccess().getFrequencyKeyword_5(), null); 
    }
(
(
		lv_frequency_6_0=RULE_INT
		{
			createLeafNode(grammarAccess.getNoiseDefAccess().getFrequencyINTTerminalRuleCall_6_0(), "frequency"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNoiseDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"frequency",
	        		lv_frequency_6_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getNoiseDefAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;





// Entry rule entryRulePerlinDef
entryRulePerlinDef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPerlinDefRule(), currentNode); }
	 iv_rulePerlinDef=rulePerlinDef 
	 { $current=$iv_rulePerlinDef.current; } 
	 EOF 
;

// Rule PerlinDef
rulePerlinDef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'Perlin' 
    {
        createLeafNode(grammarAccess.getPerlinDefAccess().getPerlinKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPerlinDefAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPerlinDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getPerlinDefAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
	'seed' 
    {
        createLeafNode(grammarAccess.getPerlinDefAccess().getSeedKeyword_3(), null); 
    }
(
(
		lv_seed_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getPerlinDefAccess().getSeedINTTerminalRuleCall_4_0(), "seed"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPerlinDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"seed",
	        		lv_seed_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'iterations' 
    {
        createLeafNode(grammarAccess.getPerlinDefAccess().getIterationsKeyword_5(), null); 
    }
(
(
		lv_iterations_6_0=RULE_INT
		{
			createLeafNode(grammarAccess.getPerlinDefAccess().getIterationsINTTerminalRuleCall_6_0(), "iterations"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPerlinDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"iterations",
	        		lv_iterations_6_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'turbulence' 
    {
        createLeafNode(grammarAccess.getPerlinDefAccess().getTurbulenceKeyword_7(), null); 
    }
(
(
		lv_turbulence_8_0=RULE_DECIMAL
		{
			createLeafNode(grammarAccess.getPerlinDefAccess().getTurbulenceDECIMALTerminalRuleCall_8_0(), "turbulence"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPerlinDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"turbulence",
	        		lv_turbulence_8_0, 
	        		"DECIMAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getPerlinDefAccess().getRightCurlyBracketKeyword_9(), null); 
    }
)
;





// Entry rule entryRuleMarbleDef
entryRuleMarbleDef returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMarbleDefRule(), currentNode); }
	 iv_ruleMarbleDef=ruleMarbleDef 
	 { $current=$iv_ruleMarbleDef.current; } 
	 EOF 
;

// Rule MarbleDef
ruleMarbleDef returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'Marble' 
    {
        createLeafNode(grammarAccess.getMarbleDefAccess().getMarbleKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMarbleDefAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMarbleDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getMarbleDefAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
	'seed' 
    {
        createLeafNode(grammarAccess.getMarbleDefAccess().getSeedKeyword_3(), null); 
    }
(
(
		lv_seed_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getMarbleDefAccess().getSeedINTTerminalRuleCall_4_0(), "seed"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMarbleDefRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"seed",
	        		lv_seed_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getMarbleDefAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getTerminalExpressionParserRuleCall_0(), currentNode); 
    }
    this_TerminalExpression_0=ruleTerminalExpression
    { 
        $current = $this_TerminalExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getExpressionAccess().getOperationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getExpressionAccess().getOperationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getOpBOPParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_op_2_0=ruleBOP		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_2_0, 
	        		"BOP", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getRightExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTerminalExpressionRule(), currentNode); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'(' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getLeftParenthesisKeyword_0_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionParserRuleCall_0_1(), currentNode); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getTerminalExpressionAccess().getRightParenthesisKeyword_0_2(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getModuleCallAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getModuleCallAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getTerminalExpressionAccess().getRefModuleDefCrossReference_1_1_0(), "ref"); 
	}

)
))
    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getBuiltInCallParserRuleCall_2(), currentNode); 
    }
    this_BuiltInCall_5=ruleBuiltInCall
    { 
        $current = $this_BuiltInCall_5.current; 
        currentNode = currentNode.getParent();
    }

    |((
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getVariantExpressionAction_3_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getVariantExpressionAction_3_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTerminalExpressionAccess().getVariantVariantEnumRuleCall_3_1_0(), currentNode); 
	    }
		lv_variant_7_0=ruleVariant		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variant",
	        		lv_variant_7_0, 
	        		"Variant", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |((
    { 
        temp=factory.create(grammarAccess.getTerminalExpressionAccess().getLiteralExpressionAction_4_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTerminalExpressionAccess().getLiteralExpressionAction_4_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_value_9_0=RULE_DECIMAL
		{
			createLeafNode(grammarAccess.getTerminalExpressionAccess().getValueDECIMALTerminalRuleCall_4_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTerminalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_9_0, 
	        		"DECIMAL", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
;





// Entry rule entryRuleBuiltInCall
entryRuleBuiltInCall returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBuiltInCallRule(), currentNode); }
	 iv_ruleBuiltInCall=ruleBuiltInCall 
	 { $current=$iv_ruleBuiltInCall.current; } 
	 EOF 
;

// Rule BuiltInCall
ruleBuiltInCall returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getBuiltInCallAccess().getINVAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBuiltInCallAccess().getINVAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'INV' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getINVKeyword_0_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_0_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getAExpressionParserRuleCall_0_3_0(), currentNode); 
	    }
		lv_a_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"a",
	        		lv_a_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_0_4(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getBuiltInCallAccess().getMIXAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBuiltInCallAccess().getMIXAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'MIX' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getMIXKeyword_1_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_1_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getAExpressionParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_a_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"a",
	        		lv_a_8_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getCommaKeyword_1_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getBExpressionParserRuleCall_1_5_0(), currentNode); 
	    }
		lv_b_10_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"b",
	        		lv_b_10_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getCommaKeyword_1_6(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getTExpressionParserRuleCall_1_7_0(), currentNode); 
	    }
		lv_t_12_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"t",
	        		lv_t_12_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_1_8(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getBuiltInCallAccess().getSINAction_2_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBuiltInCallAccess().getSINAction_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'SIN' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getSINKeyword_2_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_2_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getAExpressionParserRuleCall_2_3_0(), currentNode); 
	    }
		lv_a_17_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"a",
	        		lv_a_17_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_2_4(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getBuiltInCallAccess().getBOOLAction_3_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBuiltInCallAccess().getBOOLAction_3_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'BOOL' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getBOOLKeyword_3_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_3_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getAExpressionParserRuleCall_3_3_0(), currentNode); 
	    }
		lv_a_22_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"a",
	        		lv_a_22_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_3_4(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getBuiltInCallAccess().getSCALEAction_4_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBuiltInCallAccess().getSCALEAction_4_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'SCALE' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getSCALEKeyword_4_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_4_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getRateExpressionParserRuleCall_4_3_0(), currentNode); 
	    }
		lv_rate_27_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rate",
	        		lv_rate_27_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getCommaKeyword_4_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getExpressionExpressionParserRuleCall_4_5_0(), currentNode); 
	    }
		lv_expression_29_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_29_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_4_6(), null); 
    }
)
    |((
    { 
        temp=factory.create(grammarAccess.getBuiltInCallAccess().getRADIALAction_5_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBuiltInCallAccess().getRADIALAction_5_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'RADIAL' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRADIALKeyword_5_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getLeftParenthesisKeyword_5_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltInCallAccess().getExpressionExpressionParserRuleCall_5_3_0(), currentNode); 
	    }
		lv_expression_34_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltInCallRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_34_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getBuiltInCallAccess().getRightParenthesisKeyword_5_4(), null); 
    }
))
;





// Entry rule entryRuleBOP
entryRuleBOP returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBOPRule(), currentNode); } 
	 iv_ruleBOP=ruleBOP 
	 { $current=$iv_ruleBOP.current.getText(); }  
	 EOF 
;

// Rule BOP
ruleBOP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBOPAccess().getPlusSignKeyword_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBOPAccess().getHyphenMinusKeyword_1(), null); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBOPAccess().getAsteriskKeyword_2(), null); 
    }
)
    ;





// Rule Variant
ruleVariant returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'X' 
	{
        $current = grammarAccess.getVariantAccess().getXEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVariantAccess().getXEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'Y' 
	{
        $current = grammarAccess.getVariantAccess().getYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVariantAccess().getYEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'Z' 
	{
        $current = grammarAccess.getVariantAccess().getZEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVariantAccess().getZEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'U' 
	{
        $current = grammarAccess.getVariantAccess().getUEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVariantAccess().getUEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'V' 
	{
        $current = grammarAccess.getVariantAccess().getVEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVariantAccess().getVEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'W' 
	{
        $current = grammarAccess.getVariantAccess().getWEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVariantAccess().getWEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'T' 
	{
        $current = grammarAccess.getVariantAccess().getTEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getVariantAccess().getTEnumLiteralDeclaration_6(), null); 
    }
));



RULE_DECIMAL : ('0'..'9')* '.' ('0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


